import random        #导入模块
import time

#设置引言
def displayIntro():
    print('''You are in a land full of dragons. In front of you ,you see two
caves. In one cave, the dragon is friendly and will share his treasure with you
. The other drangon is greedy and hungry, and will eat you on sight.''')
    print()

#玩家选择
def chooseCave():
    cave = ''
    while cave != 1 and cave != 2:
        print('Which cave will you go into?( 1 or 2 )')
        cave = input()
        return cave

#设置对话流程，然后机器选择，以及判断与玩家选择是否相同
def checkCave(chooseCave):
    print('You approach the cave... ')
    time.sleep(2)
    print('It is dark and spooky...' )
    time.sleep(2)
    print('A large dragon jumps out in front of you! He opens his jaws and ...')
    print()
    time.sleep(3)

    friendlyCave = random.randint(1,2)

    if chooseCave == str(friendlyCave):
        print('Gives you his treasure!')
    else:
        print('Gobbles you down in one bite!')

#开始运行
playAgin = 'yes'
while playAgin == 'yes' or playAgin == 'y':
    displayIntro()
    caveNumber = chooseCave()
    checkCave(caveNumber)

    print('Do you want to play agin? (yse or no)')
    playAgin = input()
    
########################################################################################

1.Dragon Realm的流程图

2.导入random和time模块
time模块包含和时间相关的函数

3.Dragon Realm中的函数
函数使得我们可以多次运行相同的代码，而无需多次复制和粘贴源代码。所以，可以把代码放入到一个函数中，在需要的时候就调用这个函数。

4.def语句
def语句定义了一个新的函数，可以在随后的程序中调用该函数。def关键字后边紧跟着带有圆括号的函数名称，然后是一个冒号（:），def后边的语句块
叫def语句块。如： def displayIntro():

5.调用函数
当定义一个函数的时候，在它的def语句块中指定该函数的指令。当调用一个函数的时候，会执行def语句块中的代码，除非调用该函数，def语句块中的指令是不会执行的。

6.把函数定义放在哪里
函数的def语句和def语句块必须放在该函数的调用之前。这就像是在使用变量之前必须先为变量赋一个值一样。

7.多行字符串
3个引号字符，实则为注释

8.while语句实现循环
只要某一个条件为true，就会一直重复

9.布尔操作符
and:两边为True,才为True
or:一边为True,就为True
not:not操作符的计算是对布尔值取反

10.布尔操作符的运算（参照9）
while语法的作用，当执行完语句块的内容后，会回到开头继续判断执行的条件符不符合

11.返回值
return语句出现在一个函数的def语句块中，一旦执行了return语句，程序执行会立即跳出def语句块，程序执行将返回到调用该函数的那行代码。
这个函数调用本身的结果就是其返回值。

12.全局作用域与局部作用域

13.函数形参
把值存储在变量中，那这变量也叫做形参。

14.显示游戏结果

15.决定哪个山洞有友善的龙

16.游戏循环

17.在程序中调用函数

18.询问玩家要不要再玩一局

小结：在 Dragon Realm游戏中,我们创建了自己的函数。函数是程序中的小程序。当
调用函数时,这个函数中的代码才会运行。通过把代码分解到函数中,我们就可以
把代码组织成为更小、更容易理解的部分。
当调用函数时,实参是复制到形参中的值。函数调用本身会把返回值作为结果。
我们还介绍了变量的作用域。在函数中创建的变量存在于局部作用域中,在所
有函数之外创建的变量存在于全局作用域中。全局作用域中的代码不能使用局部变
量。如果一个局部变量的名称和全局作用域中的一个变量的名称相同,那么 Python
会认为这个局部变量是另一个不同的变量,并且给这个局部变量赋一个新的值也并
不会改变全局变量中的值。
变量作用域可能看上去有点复杂,但是对于把函数组织成和程序的其他部分区
分开的代码块来说,变量作用域非常有用。因为每个函数都有自己的局部作用域,
这就可以确保一个函数中的代码不会导致其他函数中的bug。
几乎每个程序都使用函数,因为它们非常有用通过理解函数如何工作,我们
可以减少许多录入,并且更容易修正错误。




















